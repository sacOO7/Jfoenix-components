apply from: rootProject.file('gradle/code-quality.gradle')
apply plugin: 'me.tatarka.retrolambda'

// pom file name
ext {
    pomFilePath = "${project.projectDir}/tmp/pom.xml"
    pomFile = file(pomFilePath)
}
configurations {
    dalvikSDK
    pom
}
dependencies { 
	dalvikSDK 'org.javafxports:dalvik-sdk:8.60.6@zip'
 	compile fileTree(dir: "$buildDir/dalvik-sdk/rt/lib/ext/jfxrt.jar", include: 'jfxrt.jar')
}
task extractDalvik(type: Copy) {
    from { configurations.dalvikSDK.collect { zipTree(it) }}
    into "$buildDir/"   
}
compileJava.dependsOn extractDalvik


task sourcesJar(type: Jar) {
    group 'Build'
    description 'An archive of the source code'
    classifier 'sources'    
    from sourceSets.main.allSource
}

sourceSets.main.java.srcDirs = [rootProject.file('src')]
sourceSets.main.resources.srcDirs = [rootProject.file('src')]

task retroSourcesJar(type: Jar){
	String str = sourceSets.main.output.classesDir;
	sourceSets.main.output.classesDir = "$buildDir/retrolambda/main"	
   	group 'Build'
    description 'JFoenix compiled using retro-lambda'
    classifier 'retrolambda'    
    from sourceSets.main.output
    sourceSets.main.output.classesDir = str
}


javadoc {
    excludes = ['**/*.html', 'META-INF/**']

    options.use         = true
    options.splitIndex  = true
    options.encoding    = 'UTF-8'
    options.author      = true
    options.version     = true
    options.windowTitle = "$project.name $project.version API"
    options.docTitle    = "$project.name $project.version API"
    options.links       = ['http://docs.oracle.com/javase/8/docs/api/',
                           'http://docs.oracle.com/javase/8/javafx/api/']
}

task javadocJar(type: Jar) {
    group 'Build'
    description 'An archive of the javadoc'
    classifier 'javadoc'
    from javadoc.destinationDir
}

// execute jar tasks
jar.finalizedBy retroSourcesJar
jar.finalizedBy sourcesJar
jar.finalizedBy javadocJar

// summarize artifacts
artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
    archives retroSourcesJar
    if (pomFile.exists()) {
        pom pomFile
    }
}

jar {
    exclude('com/jfoenix/android/**')   
}